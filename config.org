* Emacs Configuration

  This is my emacs configuration. This was heavily inspired by Harry
  Schwartz (you can check github.com/hrs or search for a great talk
  about emacs by him.

** Setup =use-package=

   This file uses =use-package= to install any further
   packages. =use-package= itself was already set up in
   =init.el=. Here I'm making sure that missing packages are always
   installed, compiled and updated, so it works as expected for any of
   the following sections.

   #+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)

(use-package auto-compile
  :config (auto-compile-on-load-mode))

(setq load-prefer-newer t)
   #+END_SRC

** Helper Functions

   The following is just a shorthand for lambda functions that's
   mostly used for =evil-leader= keybindings, since they have to be
   interactive

   #+BEGIN_SRC emacs-lisp
(defmacro λ! (&rest body)
  `(lambda () (interactive) ,@body))
   #+END_SRC

** Backup Behavior

   Emacs usually creates backup files in the same directory as the
   actual files.  I don't really like that. Setting these up to put
   them all in the same folder (just to be safe) and keeping a few of
   them.

   #+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      '(("." . "~/.backups")))
(setq backup-by-copying t)
(setq delete-old-versions t
      kept-new-versions 4
      kept-old-versions 2
      version-control t)
   #+END_SRC

** Vim Emulation & Rebinds

   Vim emulation using =evil-mode=. Without this (and =helm=) I'd be
   hopelessly lost in emacs. Set up =evil= and some sane defaults.

   We need to load this pretty early so that other packages can use
   =evil-leader= keybinds.

   #+BEGIN_SRC emacs-lisp
(setq evil-want-abbrev-expand-on-insert-exit nil)
(use-package evil
  :config
  (evil-mode 1))
   #+END_SRC

   Set up =evil-leader= with =<SPC>= as the leader key (like
   spacemacs).

   #+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :config
  (evil-leader/set-leader "<SPC>")
  (evil-leader-mode 1)
  (global-evil-leader-mode 1))
   #+END_SRC

   I'm a vim user. Some keybinds are not ideal in vim, but equivalent
   emacs keybindings are also inconvenient. Rebind these to something
   useful.

   #+BEGIN_SRC emacs-lisp
;; Mnemonic "file save"
(evil-leader/set-key "f s" 'save-buffer)

;; Mnemonic "mark"
(evil-leader/set-key "m m" 'bookmark-set)
;; Mnemonic "delete"
(evil-leader/set-key "m d" 'bookmark-delete)
;; Mnemonic "delete"
(evil-leader/set-key "m j" 'bookmark-jump)
   #+END_SRC

   Additionally, setup keybinds for some not-so-default functionality
   I like to use:

   #+BEGIN_SRC emacs-lisp
; Mnemonic: "config"
(evil-leader/set-key "f c" (defalias (make-symbol "edit-config")
			      (λ! (find-file "~/.emacs.d/config.org"))))
   #+END_SRC

*** Lisp Trickery

    Here is some setup to make lisp hacking a bit easier. The following
    snippet allows evaluating the currently selected expression or the
    whole buffer.

    #+BEGIN_SRC emacs-lisp
(evil-leader/set-key "e l" 'eval-last-sexp)
(evil-leader/set-key "e b" 'eval-buffer)
(evil-leader/set-key "e e" 'eval-expression)
    #+END_SRC

** Configure =org=

   This section sets up general configuration for =org-mode=. I use
   =org= extensively to organize my work. Thus, this configures some
   additional TODO keywords and some evil hotkeys for easier
   interaction. No package is loaded because =org= is shipped with
   emacs.

   #+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 9)
				(org-agenda-files :maxlevel . 9)))
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-use-outline-path t)

;; Mnemonic "org agenda"
(evil-leader/set-key "o a" 'org-agenda)
;; Mnemonic "org (clock) in"
(evil-leader/set-key "o i" 'org-clock-in)
;; Mnemonic "org (clock) out"
(evil-leader/set-key "o o" 'org-clock-out)
;; Mnemonic "org log"
(evil-leader/set-key "o l" 'org-agenda-log-mode)
;; Mnemonic "org capture"
(evil-leader/set-key "o c" 'org-capture)
;; Mnemonic "org refile"
(evil-leader/set-key "o r" 'org-refile)
;; Mnemonic "org file"
(evil-leader/set-key "o f" 'org-agenda-file-to-front)
   #+END_SRC

   This part is mainly about configuring my work inside of =org=
   files. It adds custom TODO keywords and allows easy creation of
   links between sections or files.

   #+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "DOING" "DONE" "CANCELED" "EVENTUALLY")))
(setq org-todo-keyword-faces
      '(("TODO" . "orange") ("DOING" . "yellow")
	("DONE" . "light green") ("CANCELED" . "red")
	("EVENTUALLY" . "light blue")))

;; Mnemonic "link follow"
(evil-leader/set-key "l f" 'org-open-at-point)
;; Mnemonic "link insert"
(evil-leader/set-key "l i" 'org-insert-link)
;; Mnemonic "link yank"
(evil-leader/set-key "l y" 'org-store-link)
;; Mnemonic "link paste"
(evil-leader/set-key "l p" 'org-insert-last-stored-link)
;; Mnemonic "link toggle"
(evil-leader/set-key "l t" 'org-toggle-link-display)
   #+END_SRC

   The following sets up org exporters for LaTeX and beamer. With this
   setup I can easily export beamer presentations using my preferred
   theme, *metropolis*. For custom font support, set the LaTeX
   processor to LuaLaTeX in the presentation's config.

   #+BEGIN_SRC emacs-lisp
(require 'ox-beamer)
(require 'ox-latex)
(setq org-export-allow-bind-keywords t)
(add-to-list 'org-latex-classes
	     '("beamer"
	       "\\documentclass\[presentation\]\{beamer\}"
	       ("\\section\{%s\}" . "\\section*\{%s\}")
	       ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
	       ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))
   #+END_SRC

   Finally, enable =evil= in =org-agenda=:

   #+BEGIN_SRC emacs-lisp
(use-package evil-org
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook (λ! (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
   #+END_SRC

** Replace default buffer with =dashboard=

   The package =dashboard= replaces the uncool default buffer with a
   helpful list of recent files, projects and bookmarks. Additionally,
   =initial-buffer-choice= is set, so that new =emacsclients= also use
   this.

   By default, =dashboard= and =evil= don't really play nice
   together. Because of this, we need to create some wrappers to pass
   keypresses through =evil= to =dashboard=.

   #+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (setq initial-buffer-choice (λ! (get-buffer "*dashboard*")))
  (setq dashboard-banner-logo-title "Emacs Dashboard")
  (setq dashboard-startup-banner "~/.emacs.d/logo.png")
  (setq dashboard-items '((projects . 5)
			  (recents . 5)
			  (bookmarks . 5)
			  (agenda . 5)))
  (setq dashboard-set-navigator t)

  ;; some wrapper functions to make dashboard play nice with evil
  (defun dashboard-goto-projects ()
    (interactive)
    (funcall (local-key-binding "p")))
  (defun dashboard-goto-recent ()
    (interactive)
    (funcall (local-key-binding "r")))
  (defun dashboard-goto-agenda ()
    (interactive)
    (funcall (local-key-binding "a")))
  (defun dashboard-goto-bookmarks ()
    (interactive)
    (funcall (local-key-binding "m")))


  (evil-define-key 'normal dashboard-mode-map
      "}" 'dashboard-next-section
      "{" 'dashboard-previous-section
      "p" 'dashboard-goto-projects
      "r" 'dashboard-goto-recent
      "a" 'dashboard-goto-agenda
      "m" 'dashboard-goto-bookmarks)
  (dashboard-setup-startup-hook))
   #+END_SRC

   Additional convenience keybinds for =dashboard=.

   #+BEGIN_SRC emacs-lisp
;; Mnemonic "refresh"
(evil-leader/set-key "d r" 'dashboard-refresh-buffer)
;; Mnemonic "buffer -> home"
(evil-leader/set-key "b h" (defalias (make-symbol "buffer-home")
			      (λ! (switch-to-buffer "*dashboard*"))))
   #+END_SRC

** Theming/Appearance

   Use =fira= as default font. Also bump up the font size because my
   eyes are bad. Unfortunately, =emacs= does not support font
   ligatures (yet), so we're using Fira Mono as opposed to e.g. Fira
   Code.

   #+BEGIN_SRC emacs-lisp
(set-default-font "Fira Mono 13")
(setq default-frame-alist '((font . "Fira Mono 13")))
   #+END_SRC

   I use =nord-theme= for now. Emacs 24+ supports theming out of the
   box, so we just have to fetch the actual theme from MELPA and turn
   it on.

   Note that =nord= won't actually work with =emacsclient= because of
   an issue in the package. If you initialize a new config from this
   file you'll have to apply
   [https://github.com/arcticicestudio/nord-emacs/pull/68] if the
   issue is not yet fixed.

   #+BEGIN_SRC emacs-lisp
(use-package nord-theme
  :defer t
  :init
  (if (daemonp)
    (add-hook 'after-make-frame-functions
      (lambda (frame)
	(load-theme 'nord t)))
    (load-theme 'nord t)))
   #+END_SRC

   Next, load in the =powerline= from =spacemacs= as well.

   #+BEGIN_SRC emacs-lisp
(use-package spaceline
  :config
  (spaceline-spacemacs-theme))
   #+END_SRC

   I don't like/need things like the menu bars and scroll bars. Also
   set buffers to be slightly transparent by default.

   #+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode -1)
(set-window-scroll-bars (minibuffer-window) nil nil)

(set-frame-parameter (selected-frame) 'alpha '(95 . 75))
(add-to-list 'default-frame-alist '(alpha . (95 . 75)))
   #+END_SRC

*** Linum Mode

    Always show line numbers, except in org mode where the folding
    breaks.

    #+BEGIN_SRC emacs-lisp
(setq linum-format "%d ")
(global-linum-mode)
(add-hook 'org-mode-hook (λ! (linum-mode 0)))
    #+END_SRC

    Set up a toggle to hide/show line numbers:

    #+BEGIN_SRC emacs-lisp

;; Mnemonic "linum"
(evil-leader/set-key "t l" 'linum-mode)
    #+END_SRC

** Window Management

   First of all, use spacemacs's =winum= to get numbered windows for
   easy switching, then bind =<Leader> {n}= to
   =winum-select-window-{n}=. Please tell me if that can be done more
   elegantly.

   #+BEGIN_SRC emacs-lisp
(use-package winum
  :config
  (evil-leader/set-key "1" 'winum-select-window-1)
  (evil-leader/set-key "2" 'winum-select-window-2)
  (evil-leader/set-key "3" 'winum-select-window-3)
  (evil-leader/set-key "4" 'winum-select-window-4)
  (evil-leader/set-key "5" 'winum-select-window-5)
  (evil-leader/set-key "6" 'winum-select-window-6)
  (evil-leader/set-key "7" 'winum-select-window-7)
  (evil-leader/set-key "8" 'winum-select-window-8)
  (evil-leader/set-key "9" 'winum-select-window-9)
  (setq winum-auto-setup-mode-line nil)
  (winum-mode 1))
   #+END_SRC

   Additionally, allow splitting windows using =w /= and =w -= . These
   windows will be automatically numbered by =winum= anyway.

   #+BEGIN_SRC emacs-lisp
(evil-leader/set-key "w /" 'split-window-right)
(evil-leader/set-key "w -" 'split-window-below)
   #+END_SRC

   Delete current window with =w d= and allow switching buffers with
   =b p= and =b n=. Delete buffers with =b d=.

   #+BEGIN_SRC emacs-lisp
(evil-leader/set-key "w d" 'evil-window-delete)

(evil-leader/set-key "b p" 'evil-prev-buffer)
(evil-leader/set-key "b n" 'evil-next-buffer)
(evil-leader/set-key "b d" 'evil-delete-buffer)
   #+END_SRC

** =eshell=

   =eshell= is a built-in shell + terminal emulator that works
   okay-ish cross-platform. Since it also works well with =evil= out
   of the box we only set up some keybinds here.

   #+BEGIN_SRC emacs-lisp
;; Mnemonic "shell open"
(evil-leader/set-key "s o" 'eshell)
   #+END_SRC

** Navigation with =helm= and =which-key=

    Load in =helm=, a great framework for incremental completion,
    then, as always, set up keybinds with =evil=.

    #+BEGIN_SRC emacs-lisp
(use-package helm
  :config
  (evil-leader/set-key "<SPC>" 'helm-M-x)
  (evil-leader/set-key "f f" 'helm-find-files)
  (evil-leader/set-key "f r" 'helm-recentf)
  (evil-leader/set-key "b b" 'helm-mini)
  (setq helm-ff-skip-boring-files t)
  (customize-set-variable 'helm-boring-file-regexp-list (cons "^\\..+" helm-boring-file-regexp-list))
  (helm-mode 1))
    #+END_SRC

    Also get =helm-descbinds=, which allows to search for keybinds
    using =C-h=.

    #+BEGIN_SRC emacs-lisp
(use-package helm-descbinds
  :config
  (helm-descbinds-mode))
    #+END_SRC

    =which-key= uses the minibuffer to interactively drill down into
    keybinds. Neato!

    #+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
    #+END_SRC

** Projects with =projectile= and =magit=

    Projectile allows convenient features like fuzzy file search or
    grepping on files within a project. Projects can either be
    version-controlled folders or folders manually marked by a
    =.projectile= file.

    #+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (setq projectile-completion-system 'helm)
  (setq projectile-indexing-method 'alien))

(use-package helm-projectile
  :config
  (evil-leader/set-key "p f" 'helm-projectile-find-file)
  (evil-leader/set-key "p e" 'projectile-mode)
  (helm-projectile-on)
  (projectile-mode +1))

(use-package ag)
(use-package helm-ag
  :config
  (evil-leader/set-key "p g" 'projectile-ag))
    #+END_SRC

    Fetch =magit=, intended to be a complete git porcelain within
    emacs.

    #+BEGIN_SRC emacs-lisp
(use-package evil-magit)

(evil-leader/set-key "g s" 'magit-status)
(evil-leader/set-key "g o" 'magit-show-commit)
(evil-leader/set-key "g d" 'magit-diff)
(evil-leader/set-key "g c" 'magit-commit)
(evil-leader/set-key "g r" 'magit-rebase)
(evil-leader/set-key "g m" 'magit-merge)
    #+END_SRC

** Time tracking with =org-pomodoro=

    Org-pomodoro allows starting pomodoros on org tasks, automatically
    tracking spent time and playing audio notifications when pomodoros
    and breaks start/end.

    I don't really like the default modeline but haven't gotten around
    to implementing something better.

    #+BEGIN_SRC emacs-lisp
(use-package org-pomodoro)
    #+END_SRC

** Language Specific Configs
*** =vhdl-mode=

    In my job I write a lot of VHDL. Setting up the configuration
    options for code snippets and language standard.

    #+BEGIN_SRC emacs-lisp
(setq vhdl-company-name "Silicon Austria Labs <jakob.winkler@silicon-austria.com")
(setq vhdl-standard (quote (8 nil)))
(setq vhdl-clock-name "clk_i")
(setq vhdl-reset-name "reset_in")
(setq vhdl-testbench-declarations "  -- clock
  signal clk : std_ulogic := '1';
")
(setq vhdl-testbench-entity-file-name (quote (".*" . "\\&-ea")))
(setq vhdl-testbench-entity-name (quote (".*" . "tb_\\&")))
(setq vhdl-testbench-include-configuration nil)
(setq vhdl-testbench-include-library nil)
(setq vhdl-testbench-statements
   "  -- clock generation
  clk <= not clk after 10 ns;

  stimul: process
  begin
    wait until rising_edge(clk);
  end process stimul;
")
(setq vhdl-file-header
"-------------------------------------------------------------------------------
-- Title      : <title string>
-- Project    : <project>
-------------------------------------------------------------------------------
-- File       : <filename>
-- Standard   : <standard>
<copyright>-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

")
    #+END_SRC

    Additionally, adding a keybind to toggle stutter mode.

    #+BEGIN_SRC emacs-lisp
;; Mnemonic "toggle stutter"
(evil-leader/set-key "t s" 'vhdl-stutter-mode)
    #+END_SRC

*** =scala=

    For =scala=, I use the metals LSP interface from
    scalameta.org. They provide an example configuration which I
    simply pasted here. Let's see if this works out.

    #+BEGIN_SRC emacs-lisp
;; Enable scala-mode and sbt-mode
(use-package scala-mode
  :mode "^\w+\\.s\\(cala\\|bt\\)$")

(use-package sbt-mode
  :commands sbt-start sbt-command
  :config
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPC when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map))

(use-package eglot
  :config
  (add-to-list 'eglot-server-programs '(scala-mode . ("metals-emacs")))
  ;; automatically start metals for Scala files.
  (global-set-key [?\C- ] 'complete-symbol)
  :hook (scala-mode . eglot-ensure))    

;; TODO: move this somewhere else?
(use-package company
  :config
  (global-company-mode))
    #+END_SRC

*** Markdown Suppport

    This is the place to add more packages that don't require a lot of
    configuration.

    #+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
    #+END_SRC
